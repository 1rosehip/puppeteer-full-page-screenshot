{"version":3,"sources":["../src/index.js"],"names":["pageDown","page","isEnd","evaluate","window","scrollBy","innerHeight","scrollY","document","body","clientHeight","fullPageScreenshot","options","pagesCount","extraPixels","viewport","scrollTo","Math","ceil","height","width","innerWidth","images","index","delay","waitFor","image","screenshot","fullPage","push","Jimp","read","path","write","cropped","pop","then","crop","getBufferAsync","AUTO","mergedImage","direction"],"mappings":";;;;;;;AAEA;;AACA;;;;AAHA;;AACA;AAIA,MAAMA,QAAQ,GAAG,MAAQC,IAAR,IAAkB;AAC/B,QAAMC,KAAK,GAAG,MAAMD,IAAI,CAACE,QAAL,CAAe,MAAM;AACrCC,IAAAA,MAAM,CAACC,QAAP,CAAiB,CAAjB,EAAoBD,MAAM,CAACE,WAA3B;AACA,WAAOF,MAAM,CAACG,OAAP,IAAkBC,QAAQ,CAACC,IAAT,CAAcC,YAAd,GAA6BN,MAAM,CAACE,WAA7D;AACH,GAHmB,CAApB;AAKA,SAAOJ,KAAP;AACH,CAPD;;AASA,MAAMS,kBAAkB,GAAG,OAAQV,IAAR,EAAcW,OAAO,GAAG,EAAxB,KAAgC;AACvD,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA,WAAd;AAA2BC,IAAAA;AAA3B,MAAwC,MAAMd,IAAI,CAACE,QAAL,CAAe,MAAM;AACrEC,IAAAA,MAAM,CAACY,QAAP,CAAiB,CAAjB,EAAoB,CAApB;AACA,WAAO;AACHH,MAAAA,UAAU,EAAEI,IAAI,CAACC,IAAL,CAAWV,QAAQ,CAACC,IAAT,CAAcC,YAAd,GAA6BN,MAAM,CAACE,WAA/C,CADT;AAEHQ,MAAAA,WAAW,EAAEN,QAAQ,CAACC,IAAT,CAAcC,YAAd,GAA6BN,MAAM,CAACE,WAF9C;AAGHS,MAAAA,QAAQ,EAAE;AAAEI,QAAAA,MAAM,EAAEf,MAAM,CAACE,WAAjB;AAA8Bc,QAAAA,KAAK,EAAEhB,MAAM,CAACiB;AAA5C;AAHP,KAAP;AAKH,GAPmD,CAApD;AASA,QAAMC,MAAM,GAAG,EAAf;;AACA,OAAM,IAAIC,KAAK,GAAG,CAAlB,EAAqBA,KAAK,GAAGV,UAA7B,EAAyCU,KAAK,IAAI,CAAlD,EAAsD;AAClD,QAAKX,OAAO,CAACY,KAAb,EAAqB;AACjB,YAAMvB,IAAI,CAACwB,OAAL,CAAcb,OAAO,CAACY,KAAtB,CAAN;AACH;;AACD,UAAME,KAAK,GAAG,MAAMzB,IAAI,CAAC0B,UAAL,CAAiB;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KAAjB,CAApB;AACA,UAAM5B,QAAQ,CAAEC,IAAF,CAAd;AACAqB,IAAAA,MAAM,CAACO,IAAP,CAAaH,KAAb;AACH;;AAED,MAAKb,UAAU,KAAK,CAApB,EAAwB;AACpB,UAAMa,KAAK,GAAG,MAAMI,cAAKC,IAAL,CAAWT,MAAM,CAAC,CAAD,CAAjB,CAApB;AACA,QAAKV,OAAO,CAACoB,IAAb,EAAoBN,KAAK,CAACO,KAAN,CAAarB,OAAO,CAACoB,IAArB;AACpB,WAAON,KAAP;AACH,GAxBsD,CAyBvD;;;AACA,QAAMQ,OAAO,GAAG,MAAMJ,cAAKC,IAAL,CAAWT,MAAM,CAACa,GAAP,EAAX,EACjBC,IADiB,CACXV,KAAK,IAAIA,KAAK,CAACW,IAAN,CAAY,CAAZ,EAAetB,QAAQ,CAACI,MAAT,GAAkBL,WAAjC,EAA8CC,QAAQ,CAACK,KAAvD,EAA8DN,WAA9D,CADE,EAEjBsB,IAFiB,CAEXV,KAAK,IAAIA,KAAK,CAACY,cAAN,CAAsBR,cAAKS,IAA3B,CAFE,CAAtB;AAIAjB,EAAAA,MAAM,CAACO,IAAP,CAAaK,OAAb;AACA,QAAMM,WAAW,GAAG,MAAM,uBAAOlB,MAAP,EAAe;AAAEmB,IAAAA,SAAS,EAAE;AAAb,GAAf,CAA1B;AACA,MAAK7B,OAAO,CAACoB,IAAb,EAAoBQ,WAAW,CAACP,KAAZ,CAAmBrB,OAAO,CAACoB,IAA3B;AAEpB,SAAOQ,WAAP;AACH,CAnCD;;eAqCe7B,kB","sourcesContent":["/* eslint-disable no-undef */\n/* eslint-disable no-await-in-loop */\nimport merge from 'merge-img';\nimport Jimp from 'jimp';\n\nconst pageDown = async ( page ) => {\n    const isEnd = await page.evaluate( () => {\n        window.scrollBy( 0, window.innerHeight );\n        return window.scrollY >= document.body.clientHeight - window.innerHeight;\n    } );\n\n    return isEnd;\n};\n\nconst fullPageScreenshot = async ( page, options = {} ) => {\n    const { pagesCount, extraPixels, viewport } = await page.evaluate( () => {\n        window.scrollTo( 0, 0 );\n        return {\n            pagesCount: Math.ceil( document.body.clientHeight / window.innerHeight ),\n            extraPixels: document.body.clientHeight % window.innerHeight,\n            viewport: { height: window.innerHeight, width: window.innerWidth },\n        };\n    } );\n\n    const images = [];\n    for ( let index = 0; index < pagesCount; index += 1 ) {\n        if ( options.delay ) {\n            await page.waitFor( options.delay );\n        }\n        const image = await page.screenshot( { fullPage: false } );\n        await pageDown( page );\n        images.push( image );\n    }\n\n    if ( pagesCount === 1 ) {\n        const image = await Jimp.read( images[0] );\n        if ( options.path ) image.write( options.path );\n        return image;\n    }\n    // crop last image extra pixels\n    const cropped = await Jimp.read( images.pop() )\n        .then( image => image.crop( 0, viewport.height - extraPixels, viewport.width, extraPixels ) )\n        .then( image => image.getBufferAsync( Jimp.AUTO ) );\n\n    images.push( cropped );\n    const mergedImage = await merge( images, { direction: true } );\n    if ( options.path ) mergedImage.write( options.path );\n\n    return mergedImage;\n};\n\nexport default fullPageScreenshot;\n"],"file":"index.js"}